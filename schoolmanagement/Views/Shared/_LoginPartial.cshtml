@using Microsoft.AspNetCore.Identity
@using schoolmanagement.Models.Auth 

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    // Get the current logged-in user
    var user = await UserManager.GetUserAsync(User);
    
    // Safely get the user's name. Fallback to email if name is not available.
    var userName = user?.Name ?? user?.Email ?? "Anonymous"; 

    <li class="nav-item me-3">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage" title="Manage">Hello @userName!</a>
    </li>
    
    // Check if the user is an Admin, only if 'user' is not null
    @if (user != null && await UserManager.IsInRoleAsync(user, "Admin"))
    {
        <li class="nav-item me-3">
            <a class="nav-link text-dark" asp-area="" asp-controller="Admin" asp-action="Index">Admin Panel</a>
        </li>
    }
    
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item me-3">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
